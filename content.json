[{"title":"get to know react router","date":"2020-04-24T14:56:48.959Z","path":"2020/04/24/React路由快速了解：/","text":"React路由快速了解：用框架的话自然离不开路由，不论是vue还是react使用路由都少不了要涉及到路由出口、配置路由、重定向、路由跳转以及优化所作的懒加载等等，加下来让我们快速做个入门了解(为方便联想也会简单写出vue中起同样作用的是何组件) 安装：1npm i &quot;react-router-dom&quot; --save 定义路由模式：HashRouter和BrowserRouterHashRouter对应的是Hash路由，BrowerRouter对应的是History路由 使用： 12345678//在入口文件（index.js）中引入并使用import&#123;HashRouter,Browser&#125; from \"react-router-dom\"ReactDOM.render(&lt;HashRouter&gt;&lt;APP&gt;&lt;/APP&gt;&lt;/HashRouter&gt;,document.getElementById(\"root\")) 路由出口：Switch组件vue中：router-view 1234567891011121314import &#123;Switch,Route，Redirect&#125; from \"react-router-dom\"class App &#123; render()&#123; return ( &lt;div&gt; &lt;Switch&gt; &lt;Route path=\"/index\" component=&#123;index&#125;&gt;&lt;/Route&gt; &lt;Route path=\"/login\" component=&#123;login&#125;&gt;&lt;/Route&gt; &lt;Redirect to=\"/login\"&gt;&lt;/Redirect&gt; &lt;/Switch&gt; &lt;/div&gt; ) &#125;&#125; 配置路由规则：Route组件vue中：{path:”/index”,component:index} 1&lt;Route path:\"/index\" component=&#123;index&#125;&gt;&lt;/Route&gt; 重定向：Redirect组件vue中:{path:”*”,redirect=”/index”} 1&lt;Redirect to=\"/index\"&gt;&lt;/Redirect&gt; 跳转路由 ：NavLink组件 Link组件vue:router-link 12345&lt;NavLink to=\"/index/home\"&gt;首页&lt;/NavLink&gt;&lt;NavLink to=\"/index/order\"&gt;订单&lt;/NavLink&gt;&lt;NavLink to=\"/index/mine\"&gt;我的&lt;/NavLink&gt;&lt;Link to=\"/flower\"&gt;鲜花&lt;/Link&gt; 那OK，小伙伴可能问了这两者什么区别或者这两者用哪个更好呢？ 区别呢就是NavLink有activeClassName属性，Link没有。至于哪个更好看你个人喜好了，没有哪个比哪个更优一说 上面说的activeClassName小伙伴有没有些许印象呢？往下看咯 选中的导航：activeClassNamevue中：activeClass=”select” 123&lt;NavLink to=\"/index/home\" activeClassName=\"select\"&gt;首页&lt;/NavLink&gt;&lt;NavLink to=\"/index/order\"activeClassName=\"select\"&gt;订单&lt;/NavLink&gt;&lt;NavLink to=\"/index/mine\" activeClassName=\"select\"&gt;我的&lt;/NavLink&gt; 嵌套路由:1234567891011121314import &#123;Switch,Route，Redirect&#125; from \"react-router-dom\"class App &#123; render()&#123; return ( &lt;div&gt; &lt;Switch&gt; &lt;Route path=\"/index/home\" component=&#123;home&#125;&gt;&lt;/Route&gt; &lt;Route path=\"/index/order\" component=&#123;order&#125;&gt;&lt;/Route&gt; &lt;Redirect to=\"/index/home\"&gt;&lt;/Redirect&gt; &lt;/Switch&gt; &lt;/div&gt; ) &#125;&#125; 编程式导航：vue: this.$router.push()/replace/go 123this.props.history.push(\"/flower\") //添加一条新的历史记录this.props.history.replace(\"/flower\")//用新的历史记录替换当前的历史记录this.props.history.go(-1)// 注！注！注！ 123push,repalce,go这三个方法，只有参与路由的组件才可以直接使用；没有参与路由的组件要使用，需要调用withRouter()方法才可以使用 12345678910111213import React, &#123; Component &#125; from 'react'import &#123; withRouter &#125; from \"react-router-dom\"class Back extends Component &#123; goBack() &#123; this.props.history.go(-1) &#125; render() &#123; return ( &lt;button onClick=&#123;this.goBack.bind(this)&#125;&gt;返回组件&lt;/button&gt; ) &#125;&#125;export default withRouter(Back) 此处的back是我定义的一个公共起返回作用的组件，并未参与路由 传参1.动态路由传参12&#123;/* 动态路由 */&#125;&lt;Route path=\"/flower-detail/:id/:name\" component=&#123;FlowerDetail&#125;&gt;&lt;/Route&gt; 123//获取参数this.props.match.params.id this.props.match.params.name 2.通过问号？传参12345678&#123; flowers.map(item=&gt;&#123; return ( &lt;li key=&#123;item.id&#125;&gt; &lt;Link to=&#123;\"/flower-detail?id=\"+item.id&#125;&gt;&#123;item.name&#125;&lt;/Link&gt; &lt;/li&gt;) &#125;)&#125; 123456789101112131415//获取参数有2种方法//第一种：var str=this.props.location.search.slice(1);//'id=1&amp;a=10&amp;b=20&amp;c=30'var arr=str.split(\"&amp;\");//[\"id=1\", \"a=10\", \"b=20\", \"c=30\"]var json =&#123;&#125;for(var i=0;i&lt;arr.length;i++)&#123; var tempArr=arr[i].split(\"=\");//[\"id\",\"11\"] json[tempArr[0]]=tempArr[1]&#125;//第二种：import querystring from \"querystring\"var json=querystring.parse(this.props.location.search.slice(1)) 登录拦截1.此处我是专门封装了一个MyRoute组件去做的拦截，这样就不止一个可以调用了 123456789101112131415import React, &#123; Component &#125; from 'react'import &#123;Route,Redirect&#125; from \"react-router-dom\"export default class MyRoute extends Component &#123; render() &#123; //如果登录了，就会取到名字，如果没有登录，就会取到null var name=localStorage.getItem(\"name\"); return ( &lt;div&gt; &#123; name?&lt;Route &#123;...this.props&#125;&gt;&lt;/Route&gt;:&lt;Redirect to=\"/login\"&lt;/Redirect&gt; &#125; &lt;/div&gt; ) &#125;&#125; 此处我是都让其到了login，具体使用可根据实际需求去做。我是用的重定向，各位也可以用组件去做，不过需要引withRouter 2.调用 12345678910111213141516&lt;Switch&gt; &#123;/* 路由规则 */&#125; &lt;Route path=\"/login\" component=&#123;Login&#125;&gt;&lt;/Route&gt; &#123;/* 登录拦截：定义个组件MyRoute,先判断登录没登录，没登录，前往登录；如果登录，返回Route */&#125; &lt;MyRoute path=\"/index\" component=&#123;Index&#125;&gt;&lt;/MyRoute&gt; &lt;MyRoute path=\"/flower\" component=&#123;Flower&#125;&gt;&lt;/MyRoute&gt; &#123;/* 动态路由 */&#125; &lt;MyRoute path=\"/flower-detail/:id/:name\" component=&#123;FlowerDetail&#125;&gt;&lt;/MyRoute&gt; &lt;Route path=\"/food\" component=&#123;Food&#125;&gt;&lt;/Route&gt; &lt;Route path=\"/food-detail\" component=&#123;FoodDetail&#125;&gt;&lt;/Route&gt; &#123;/* 重定向 */&#125; &lt;Redirect to=\"/login\"&gt;&lt;/Redirect&gt; &lt;/Switch&gt; 懒加载1.还是封装了一个函数 123456789101112131415161718192021222324252627282930313233import React, &#123; Component &#125; from 'react'function asyncComponent(fn) &#123; //定义组件 class resuleComponent extends Component &#123; constructor() &#123; super() this.state = &#123; C: null &#125; &#125; componentDidMount() &#123; fn().then(module =&gt; &#123; this.setState(&#123; C: module.default &#125;) &#125;) &#125; render() &#123; const &#123; C &#125; = this.state; return ( &lt;div&gt; &#123; C ? &lt;C &#123;...this.props&#125;&gt;&lt;/C&gt; : null &#125; &lt;/div&gt; ) &#125; &#125; return resuleComponent;&#125;export default asyncComponent; 2.调用 1const Flower=asyncComponent(()=&gt;import('./pages/Flower/Flower'))","categories":[],"tags":[{"name":"React Router","slug":"React-Router","permalink":"http://yoursite.com/tags/React-Router/"}]},{"title":"Hello World","date":"2020-04-19T16:21:11.870Z","path":"2020/04/20/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]